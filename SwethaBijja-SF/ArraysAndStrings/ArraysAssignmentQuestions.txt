Problem 1:
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of
candies the i
th
kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the i
th
kid all the extraCandies,

they will have the greatest number of candies among all the kids, or false otherwise.
Note that multiple kids can have the greatest number of candies.

Solution:

import java.util.*;
public class CandyKid {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter size of array = ");
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.print("Enter extra candy = ");
        int ec = sc.nextInt();
        System.out.println("Boolean result array = " + candy(n, a, ec));
    }

    static ArrayList<Boolean> candy(int n, int a[], int ec) {
        ArrayList<Boolean> al = new ArrayList<>();
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] > max)
                max = a[i];
        }
        for (int i = 0; i < n; i++) {
            int m = a[i] + ec;
            if (m >= max)
                al.add(true);
            else
                al.add(false);
        }
        return al;
    }
}

Output:
Enter size of array = 5
2 3 5 1 3
Enter extra candy = 3
Boolean result array = [true, true, true, false, true]


________________________________________________________________________________________________________________________________

Problem 2:
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of
the i
th
line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.


Solution:

import java.util.*;

public class Height {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size = ");
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.println("Maximum Area = " + maxArea(a));
    }

    static int maxArea(int[] a) {
        int n = a.length;
        int l = 0, r = n - 1, ma = 0;

        while (l < r) {
            int ar = Math.min(a[l], a[r]) * (r - l);
            ma = Math.max(ma, ar);

            if (a[l] < a[r]) {
                l++;
            } else {
                r--;
            }
        }
        return ma;
    }
}


Output:
Enter size =
9
1 8 6 2 5 4 8 3 7
Maximum Area = 49

________________________________________________________________________________________________________________________________

Problem 3:

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to
target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.

Solution:

import java.util.*;

public class ClosestSum {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.print("Enter target = ");
        int t = sc.nextInt();
        System.out.println("Closest sum of any 3 integers = " + closestsum(a, n, t));
    }

    static int closestsum(int a[], int n, int t) {
        Arrays.sort(a);
        int cs = a[0] + a[1] + a[2];
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1;
            int r = n - 1;
            while (l < r) {
                int sum = a[i] + a[l] + a[r];
                if (Math.abs(sum - t) < Math.abs(cs - t)) {
                    cs = sum;
                }
                if (sum < t) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        return cs;
    }
}

Output:

4
-1 2 1 -4
Enter target = 1
Closest sum of any 3 integers = 2


-----------------------------------------------------------------------------------------------------------------------------------------

Problem 4:
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
● For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1,
3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if
all the permutations of the array are sorted in one container according to their lexicographical order, then the next
permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the
array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
●
●
●
For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger
rearrangement.
Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.

Solution:

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a[] = new int[n];
		for(int i=0; i<n; i++)a[i]=sc.nextInt();
		nextPermutation(a);
		System.out.println(Arrays.toString(a));
	}
	static public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i < 0) {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        int j = nums.length - 1;
        while (j >= 0 && nums[j] <= nums[i]) {
            j--;
        }
        swap(nums, i, j);
        reverse(nums, i + 1, nums.length - 1);
    }

    static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
    
    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

}


Output:

3
1 2 3
Second highest permutation = [1, 3, 2]

------------------------------------------------------------------------------------------------------------------------------------

Problem 5:
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length)

such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-
1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it
is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Solution:

import java.util.*;

class RotatingArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.print("Enter target = ");
        int t = sc.nextInt();
        System.out.println("Index of the target = " + BinarySearch(a, t));
    }

    static int BinarySearch(int a[], int t) {
        int l = 0, r = a.length - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (a[m] == t)
                return m;
            else if (a[l] <= a[m]) {
                if (t >= a[l] && t < a[m])
                    r = m - 1;
                else
                    l = m + 1;
            } else {
                if (t > a[m] && t <= a[r])
                    l = m + 1;
                else
                    r = m - 1;
            }
        }
        return -1;
    }
}

Output:

7
4 5 6 7 0 1 2
Enter target = 0
Index of the target = 4

Time complexity = O(log(n))

------------------------------------------------------------------------------------------------------------------------------

Problem 6:
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Solution:

import java.util.*;

class PermutationArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.println("Permuations of given array in order = " + Permuations(a));
    }

    static public List<List<Integer>> Permuations(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums); // sort the array to handle duplicates
        backtrack(nums, new boolean[nums.length], new ArrayList<>(), result);
        return result;
    }

    static void backtrack(int[] nums, boolean[] used, List<Integer> current, List<List<Integer>> result) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                continue; // skip used numbers or duplicates
            }
            used[i] = true;
            current.add(nums[i]);
            backtrack(nums, used, current, result);
            used[i] = false;
            current.remove(current.size() - 1);
        }
    }
}

Output:

3
1 2 3
Permuations of given array in order = [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

-------------------------------------------------------------------------------------------------------------------------------------------

Problem 7:

Given an integer array nums, find the subarray with the largest sum, and return its sum.

Solution:

import java.util.Scanner;

public class MaxSubArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.println("Maximum Sum of Array = " + MaxSum(a));
    }

    static int MaxSum(int nums[]) {
        int max = nums[0];
        int curmax = nums[0];
        for (int i = 1; i < nums.length; i++) {
            curmax = Math.max(nums[i], curmax + nums[i]);
            max = Math.max(max, curmax);
        }
        return max;
    }
}

Output:
9
-2 1 -3 4 -1 2 1 -5 4
Maximum Sum of Array = 6

--------------------------------------------------------------------------------------------------------------------------------------

Problem 8
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an
array of the non-overlapping intervals that cover all the intervals in the input.

Solution:

import java.util.*;

public class MergeIntervals {
    static ArrayList<List<Integer>> merge(ArrayList<List<Integer>> intervals) {

        Collections.sort(intervals, (a, b) -> a.get(0) - b.get(0));
        ArrayList<List<Integer>> merged = new ArrayList<>();

        for (int i = 0; i < intervals.size(); i++) {
            if (merged.isEmpty() || merged.get(merged.size() - 1).get(1) < intervals.get(i).get(0)) {
                ArrayList<Integer> v = new ArrayList<>();
                v.add(intervals.get(i).get(0));
                v.add(intervals.get(i).get(1));

                merged.add(v);
            } else {

                merged.get(merged.size() - 1).set(1,
                        Math.max(merged.get(merged.size() - 1).get(1), intervals.get(i).get(1)));
            }
        }

        return merged;
    }

    public static void main(String args[]) {
        ArrayList<List<Integer>> arr = new ArrayList<>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int j = 0; j < n; j++) {
            arr.add(Arrays.asList(new Integer[] { sc.nextInt(), sc.nextInt() }));
        }
        ArrayList<List<Integer>> ans = merge(arr);
        System.out.print("Merged Overlapping Intervals are " + ans);
    }
}


Output:

2
1 3
2 6
Merged Overlapping Intervals are [[1, 6]]

Time Complexity = O(NlogN) + O(N). O(NlogN) for sorting and O(N) for traversing through the array.

----------------------------------------------------------------------------------------------------------------------------------------

Problem 9:
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are
adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Solution:

import java.util.*;

public class sorting {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        for (int i = 0; i < a.length; i++) {
            for (int j = i + 1; j < a.length; j++) {
                int tmp = 0;
                if (a[i] > a[j]) {
                    tmp = a[i];
                    a[i] = a[j];
                    a[j] = tmp;
                }
            }
        }
        System.out.println("After sorting = " + Arrays.toString(a));
    }
}

Output:

4
0 1 3 2
After sorting = [0, 1, 2, 3]

------------------------------------------------------------------------------------------------------------------------------------

Problem 10
You are given an integer array prices where prices[i] is the price of a given stock on the i
th day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time.
However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.

Solution:

import java.util.Scanner;

public class MaxProfit {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.println("Maximum profit = " + maxProfit(a));
    }

    static public int maxProfit(int[] prices) {
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        for (int price : prices) {
            minPrice = Math.min(minPrice, price);
            int todayProfit = price - minPrice;
            maxProfit = Math.max(maxProfit, todayProfit);
        }
        return maxProfit;
    }
}

Output:

5
1 2 3 4 5
Maximum profit = 4

------------------------------------------------------------------------------------------------------------------------------------

Problem 11
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return
the index to any of the peaks.

Solution:
import java.util.Scanner;

public class FindMaxIndex {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        int max = 0;
        int cnt = 0;
        for (int x = 0; x < n; x++) {
            max = Math.max(max, a[x]);
        }
        for (int i = 0; i < n; i++) {
            if (a[i] == max)
                cnt = i;
        }
        System.out.println("Maximum index = " + cnt);
    }

}

Output:

4
1 2 3 1
Maximum index = 2

-------------------------------------------------------------------------------------------------------------------------------------------

Problem 12
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Solution:

import java.util.*;

public class Median {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n1 = sc.nextInt();
        int a[] = new int[n1];
        for (int i = 0; i < n1; i++)
            a[i] = sc.nextInt();
        int n2 = sc.nextInt();
        int b[] = new int[n2];
        for (int i = 0; i < n2; i++)
            b[i] = sc.nextInt();
        System.out.println("Median of 2 sorted arrays is = " + findMedianSortedArrays(a, b));
    }

    static public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] arr = new int[nums1.length + nums2.length];
        int k = 0;
        for (int i = 0; i < nums1.length; i++) {
            arr[k++] = nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            arr[k++] = nums2[i];
        }
        Arrays.sort(arr);
        int mid = arr.length / 2;
        if (arr.length % 2 == 0) {
            return (double) (arr[mid - 1] + arr[mid]) / 2;
        }
        return arr[mid];
    }
}

Output:

2
1 3
2
2 4
Median of 2 sorted arrays is = 2.5

-------------------------------------------------------------------------------------------------------------------------------------------

                                                .....13th Problem is same as 2nd problem.....




-------------------------------------------------------------------------------------------------------------------------------------------

Problem 14
Given a binary array nums, return the maximum number of consecutive 1's in the array.

Solution:

import java.util.*;

public class MaxConcecutiveOnes {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        int max = 0;
        int c = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 1) {
                c++;
                max = Math.max(max, c);

            } else if (a[i] == 0) {
                c = 0;
            }
        }
        System.out.println("Max consecutive ones = " + max);
    }
}

Output:

5
1 1 1 0 1 1 1 
Max consecutive ones = 3

-----------------------------------------------------------------------------------------------------------------------------------

Problem 15
Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
You must solve it in O(n) time complexity.

Solution:

mport java.util.*;

public class KthLargest {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        System.out.print("Kth value = ");
        int k = sc.nextInt();
        Arrays.sort(a);
        System.out.println(" Kth Largest element in sorted order " + a[n - k]);

    }
}


Output:

6
3 2 1 5 6 4
Kth value = 2
Kth Largest element in sorted order 5



